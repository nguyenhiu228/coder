import os
try:
    from urllib.parse import unquote
    import requests, datetime
    import ast, re
    from time import sleep
    from colorama import  Fore
    import datetime, json, random
    from bs4 import BeautifulSoup
    import pytz
    from re import findall
except:
    os.system("pip install bs4")
    os.system("pip install colorama")
    os.system("pip install pytz")
    from urllib.parse import unquote
    import requests, datetime
    import re, ast
    from time import sleep
    from colorama import  Fore
    import datetime, json, random
    from bs4 import BeautifulSoup
    import pytz
#s = requests.session()
os.system("cls")
os.system("clear")
# màu
do = Fore.RED
vang = Fore.YELLOW
xanh = Fore.GREEN
blue = Fore.BLUE
magenta = Fore.MAGENTA
trang = Fore.WHITE
mau = Fore.LIGHTCYAN_EX
cyan = Fore.CYAN
b = os.path.exists("/storage/emulated/0/Android")
c =os.path.exists("/Users/Public")
if os.path.exists("cookie.json") == False:
    os.makedirs("cookie.json")
    f = open("cookie.json","w")
    co = '{"cookie": []}'
    json.dump(co,f,indent=4)
    f.close()
#duong_dan_file = os.path.realpath(file).lower()
#list_duong_dan = ["/storage/emulated/0/hana/hana.py", "/storage/emulated/0/download/hana/hana.py", "0/hana/hanav4.py", "c:\hana\hana.py", "/storage/emulated/legacy/download/hana/hana.py", "/storage/sdcard0/hana/hana.py", "/storage/sdcard0/download/hana/hana.py","/storage/emulated/0/hana/hanav3.py"]
"""if duong_dan_file in list_duong_dan:
    pass
else:
	print(duong_dan_file)
    print(do+"Bạn đang tool không đúng file, vui lòng không nhân bản file để tool.")
    exit(0)"""
tk = input(f"{do}[{vang}+{do}] {xanh}Nhập UserName Hana: {vang}")
mk = input(f"{do}[{vang}+{do}] {xanh}Nhập Mật Khẩu Hana: {vang}")
os.system("clear")
print("\033[1;36m==============================================================")
print("              \033[1;31m █████╗  ██████╗ ██╗   ██╗███████╗")
print("              \033[1;32m██╔══██╗██╔════╝ ██║   ██║██╔════╝")
print("              \033[1;33m███████║██║  ███╗██║   ██║███████╗")
print("              \033[1;34m██╔══██║██║   ██║██║   ██║╚════██║")
print("              \033[1;35m██║  ██║╚██████╔╝╚██████╔╝███████║")
print("              \033[1;36m╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚══════╝")
print("\033[1;36m==============================================================")
print("               \033[1;31m[•] \033[1;37mCreator" "      :    " "\033[1;33mMr Duy")
print("               \033[1;31m[•] \033[1;37mDisplay" "      :    " "\033[1;33mAgus")
print("\033[1;36m==============================================================")
print("                     \033[1;33m\033[7mTool Auto Hana Premium\033[0m")
print("\033[1;36m==============================================================")
print(f"{do} >>{vang} 50K {xanh} trong {vang}1{xanh} Tháng")
print(f"{do} >>{xanh} Người Mua: {vang}Trần Minh Khải")
print(f"{do} >>{xanh} Ngày Mua: {vang}22/07/2020")
print(f"{do} >> {xanh}Đừng Tool Quá Nhanh Và Nhiều Account Cùng Lúc Tránh Bị Ban IP")
print("\033[1;36m==============================================================")
head_login = {
"Host": "admin.amaiteam.com",
"content-length": "48",
"accept": "application/json, text/plain, */*",
"authorization": "Bearer null",
"save-data": "on",
"user-agent": "Mozilla/5.0 (Linux; Android 7.1.1; MI 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36",
"content-type": "application/json;charset=UTF-8",
"origin": "https://fb.vieclamonline.org",
"sec-fetch-site": "cross-site",
"sec-fetch-mode": "cors",
"sec-fetch-dest": "empty",
"referer": "https://fb.vieclamonline.org/login",
"accept-encoding": "gzip, deflate, br",
"accept-language": "vi-VN,vi;q=0.9,fr-FR;q=0.8,fr;q=0.7,en-US;q=0.6,en;q=0.5"
    }
#data_login = {"username":account,"password":password}
data_login = '{"username":"'+tk+'","password":"'+mk+'"}'

host = "https://mbasic.facebook.com"
data_Tool = {
        'cookie':""
        }
print(f"{do}[{vang}+{do}] {xanh}Thời Gian Delay Giữa Các Job\n{blue}==> {vang}1. Random Từ 1 Đến 20\n{blue}==> {vang}2. Nhập Số Tùy Chọn")
iptime = input(f"{do}[{vang}+{do}] {xanh}Nhập {do}1{xanh} hoặc {do}2{xanh}: {cyan}")
if(iptime == "1" or iptime == 1):
    timer = random.randint(1,20)
elif(iptime == "2" or iptime  == 2):
    timer = int(input(f"{do}[{vang}+{do}] {xanh}Nhập Thời Gian Delay Giữa Các Job: {vang}"))
else:
	print (f"{do}Nhập Số Và Không Lớn Hơn 2 Trời Ạ!!!")
	exit(0)
#auto fb
class autoFB:
        
    def Cookie(self, cookie):
        self.headers["cookie"] = cookie
         
    
    def GetFb(self, url, allow_redirects=False):
        for i in range(10000):
            try:
                self.headers = {
                'Host':'mbasic.facebook.com',
                'upgrade-insecure-requests': '1',
                'user-agent': 'Mozilla/5.0 (Linux; Android 7.1.1; MI 4 Build/NMF26V; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.105 Mobile Safari/537.36',
                'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
                'sec-fetch-site': 'same-origin',
                'accept-encoding':'gzip, deflate',
                'sec-fetch-mode': 'navigate',
                'accept-language': 'vi-VN,vi;q=0.9,en-GB;q=0.8,en;q=0.7,fr-FR;q=0.6,fr;q=0.5,en-US;q=0.4',
                'cookie': data_Tool["cookie"],
            }
                
                #print(self.headers)
                sleep(4)
                a = requests.get(url=url, headers=self.headers, allow_redirects=allow_redirects)                 
                return a
            except requests.ConnectionError:
                for i in range(30, -1, -1):
                    print(do+"\r Lỗi mạng... kết nối lại sau {} giây.  ".format(i),end="\r")
                    sleep(1)
                    print(" "*40,end="\r")
            except Exception as e:
                sleep(1)
                print(e)
                print("Lỗi get")
                continue
    
    def PostFb(self, url, data="", allow_redirects=False):
        for k in range(10000):
            try:
                self.headers = {
                'Host':'mbasic.facebook.com',
                'upgrade-insecure-requests': '1',
                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36',
                'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
                'sec-fetch-site': 'same-origin',
                'accept-encoding':'gzip, deflate',
                'sec-fetch-mode': 'navigate',
                'accept-language': 'vi-VN,vi;q=0.9,en-GB;q=0.8,en;q=0.7,fr-FR;q=0.6,fr;q=0.5,en-US;q=0.4',
                'cookie': data_Tool["cookie"],
            }
                #print(self.headers)
                sleep(4)
                a = requests.post(url=url, headers=self.headers, data=data, allow_redirects=allow_redirects)
                return a
            except requests.ConnectionError:
                for i in range(30, -1, -1):
                    print(do+"\r Lỗi mạng... kết nối lại sau {} giây.  ".format(i),end="\r")
                    sleep(1)
                    print(" "*40,end="\r")
            except Exception as e:
                print(e)
                sleep(1)
                print("lỗi post")
                continue
    
    #Tool Fb
    def Tag_a(self, url):
        data_get = self.GetFb(url)
        text_url = data_get.text
        if 'aria-pressed="true"' in text_url: return 30
        if "/login/device-based/" in text_url or "Log In" in text_url or "Đăng nhập" in text_url or "https://mbasic.facebook.com/login.php" in text_url:
            print(do+"==> Cookie Die")
            print(blue+'==============================================================')
            return 21
        tree = BeautifulSoup(data_get.text, "html.parser")
        #footer = tree.find_all("footer", {"data-ft":'{"tn":"*W"}'})
        footer = tree.find_all("table", {"role":'presentation'})
        list_data = []
        for t_a in footer:
            a = t_a.find_all("a", href = True)
            for i in a:
                href = i["href"]
                if "/login.php?" in href: return 21
                data = {"href":href}
                list_data.append(data)
        return list_data
        
    def get_url(self, url):
          
         for k in range(10000):
                try:
                    get_link = self.GetFb(url, allow_redirects=True)
                    break
                except requests.ConnectionError:
                    for i in range(30, -1, -1):
                        print(do+"\r Lỗi mạng... kết nối lại sau {} giây.  ".format(i),end="\r")
                        sleep(1)
                        print(" "*40,end="\r")
                except Exception as e:
                    print(e)
                    sleep(1)
                    print(do+"lỗi get url")
                    continue
         if "checkpoint" in get_link.url:
             print(do+"Acc đã bị checkpoint")
             return 21
         if "https://mbasic.facebook.com/login.php?next" in get_link.url:
             #print(do+"Cookie die, hoặc do link nên mình bỏ job này.")
             url = unquote(get_link.url)
             m = url.find("next=")
             n = url.find("&refs")
             return url[m+5:n]
         if "Để bảo vệ cộng đồng khỏi spam, chúng tôi giới hạn tần suất bạn đăng bài, bình luận" in get_link.text or "We limit how often you can post, comment or do other things in a given amount" in get_link.text:
            print(do+"Acc đã bị dính spam")
            return 21
         if "Trang bạn yêu cầu không thể hiển thị ngay bây giờ" in get_link.text or "The page you requested cannot be displayed right now" in get_link.text or "Không tìm thấy nội dung" in get_link.text or "Content not found" in get_link.text:
             print(f"{do}[{vang}X{do}] {do}Link bài viết không tồn tại")
             return 3
         return get_link.url

class Like(autoFB):
    fb = autoFB()
    def __init__(self, url):
        self.url = url
        self.data_href = {
            "react":[],
            "react_one":""
            }
        
    def check_chan_like(self, text):
        if "https://mbasic.facebook.com/help/contact" in text:
            print(do+"Bạn đã bị chặn like.")
            return 2
    
    def check_like(self,req, viec):
        if viec == "Like Page":
            if req.status_code == 302:
                print(vang+f"{do}[{vang}✓{do}] {xanh}Đã {viec}")
                return 5
            else:
                print(do+f"Không thể {viec}")
                print(req)
                return 0
        if req.status_code == 302:
            print(vang+f"{do}[{vang}✓{do}] {xanh}Đã {viec}")
            return 5
        else:
            print(vang+f"={blue}> {do}Không thể {viec}")
            print(req)
            return 0
         
    def li_a(self, viec):
        self.link = fb.get_url(self.url)
        if self.link == 3: return 3
        elif self.link== -3: return -3
        elif self.link == 21: return 21
        tag_a = fb.Tag_a(self.link)
        if tag_a == 30:
            print(vang+f"{do}[{vang}✓{do}] {xanh}Đã {viec}")
            return 5
        elif tag_a == 21:
            return 21
        list_li_a = []
        for i in tag_a:
            href = i["href"]
            #Check bày tỏ cảm xúc
            if "/reactions/picker/?" in href :
                
                tag_li_a = fb.GetFb(host + href)
                tree = BeautifulSoup(tag_li_a.text, "html.parser")
                tag_a = tree.find_all("a", href = True)
                for a in tag_a:
                    href = a["href"]
                    data = {"href": href}
                    list_li_a.append(data)
                return list_li_a
        return 3
    
    
    def like(self):
        list_tag_a = self.li_a("Like bài viết")
        if list_tag_a == 21: return 21
        elif list_tag_a == -3: return -3
        elif list_tag_a == 5: return 5
        elif list_tag_a == 3: return 3
        for i in list_tag_a:
            button = i["href"]
            if "reaction_type=1" in button :
                nhan_like = fb.GetFb(host + button)
                return self.check_like(nhan_like, "Like bài viết")
        print(vang+f"={blue}> {do}Không có nút like bài viết")
        return 0
         
    def haha(self):
        list_tag_a = self.li_a("Haha")
        if list_tag_a == 21: return 21
        elif list_tag_a == -3: return -3
        elif list_tag_a == 5: return 5
        elif list_tag_a == 3: return 3
        for i in list_tag_a:
            button = i["href"]
            if "reaction_type=4" in button:
                nhan_haha = fb.GetFb(host + button)
                return self.check_like(nhan_haha, "Haha")
         
    def wow(self):
        list_tag_a = self.li_a("Wow")
        if list_tag_a == 21: return 21
        elif list_tag_a == -3: return -3
        elif list_tag_a == 5: return 5
        elif list_tag_a == 3: return 3
        for i in list_tag_a:
            button = i["href"]
            if "reaction_type=3" in button:
                nhan_wow = fb.GetFb(host + button)
                return self.check_like(nhan_wow, "Wow")
         
    def love(self):
        list_tag_a = self.li_a("Yêu thích")
        if list_tag_a == 21: return 21
        elif list_tag_a == -3: return -3
        elif list_tag_a == 5: return 5
        elif list_tag_a == 3: return 3
        for i in list_tag_a:
            button = i["href"]
            if "reaction_type=2" in button:
                nhan_love = fb.GetFb(host + button)
                return self.check_like(nhan_love, "Yêu thích")
         
    def sad(self):
        list_tag_a = self.li_a("Buồn")
        if list_tag_a == 21: return 21
        elif list_tag_a == -3: return -3
        elif list_tag_a == 5: return 5
        elif list_tag_a == 3: return 3
        for i in list_tag_a:
            button = i["href"]
            if "reaction_type=7" in button:
                nhan_sad = fb.GetFb(host + button)
                return self.check_like(nhan_sad, "Buồn")
         
    def angry(self):
        list_tag_a = self.li_a("Phẫn nộ")
        if list_tag_a == 21: return 21
        elif list_tag_a == -3: return -3
        elif list_tag_a == 5: return 5
        elif list_tag_a == 3: return 3
        for i in list_tag_a:
            button = i["href"]
            if "reaction_type=8" in button:
                nhan_angry = fb.GetFb(host + i["href"])
                return self.check_like(nhan_angry, "Phẫn nộ")
                
         
    def care(self):
        list_tag_a = self.li_a("Thương thương")
        if list_tag_a == 21: return 21
        elif list_tag_a == -3: return -3
        elif list_tag_a == 5: return 5
        elif list_tag_a == 3: return 3
        for i in list_tag_a:
            name = i["href"]
            if name == "Care" or name == "Thương thương" or name == "care" or name == "thương thương":
                nhan_care = fb.GetFb(host + i["href"])
                if self.check_chan_like(nhan_care.text) == 2:
                    return 2
                
                return self.check_like(nhan_care, "Thương thương")
        print(do+"Không có nút thương thương")
        return 0
         
    def likepage(self):
        self.link = fb.get_url(self.url)
        if self.link == 3: return 3
        elif self.link == -3: return -3
        elif self.link == 21: return 21
        tag_a = fb.Tag_a(self.link)
        if tag_a == 21:
            return 21
        for k in tag_a:
            href = k["href"]
            if "/login.php?" in href: return 21
            if "a/profile.php?unfan" in href:
                print(vang+f"{do}[{vang}✓{do}] {xanh}Đã Like page")
                return 5
            
            if "a/profile.php?fan"  in href:
                nhan_like_page = fb.GetFb(host + href)
                return self.check_like(nhan_like_page, "Like Page")
        print(vang+f"{do}[{vang}X{do}] Không có nút like page")
        return 0

class Comment(autoFB):
    fb = autoFB()
    def __init__(self, url, text_comment):
        self.data = {
        "url": url,
        "comment":text_comment,
        }
        
    
    def get_comment(self, link_url):
        nhan_comment = fb.GetFb(host+link_url)
        soup = BeautifulSoup(nhan_comment.text, "html.parser")
        link_cmt = soup.find_all('form', {"method":"post"})[0]["action"]
        fb_dtsg = soup.find_all('input', {"name":"fb_dtsg"})[0]["value"]
        jazoest = soup.find_all('input', {"name":"jazoest"})[0]["value"]
        data = {
        "fb_dtsg": fb_dtsg,
        "jazoest": jazoest,
        "comment_text": "dhellowi1",
        "photo": "",
        "post": "Bình luận"
        }
        post_comment = fb.PostFb(url=link_cmt,data=data)
        #print(post_comment.text)
        if post_comment.status_code == 302:
            print(vang+f"={blue}> {xanh}Comment thành công")
            return 5
        else:
            print(post_comment.status_code)
            print(vang+f"={blue}> {do}Comment không thành công")
            return 0
    
    def comment(self):
        get_cmt = fb.GetFb(self.data["url"])
        tree = BeautifulSoup(get_cmt.text, "html.parser")
        a = tree.find_all("a", href = True)
        for i in a:
            button = i["href"]
            if "/login.php?" in button: return 21
            if  "mbasic/comment/advanced" in button :
                return self.get_comment(link_url=button)
        print(vang+f"={blue}> {do}Không có nút comment")
        return 0
            
                 
class Share(autoFB):
    fb = autoFB()
    def __init__(self, url):
        self.url = url
    def get_share(self, link_url):
        get_html_share = fb.GetFb(host+link_url)
        soup = BeautifulSoup(get_html_share.text,"html.parser")
        #print(soup.find_all("form"))
        #exit(0)
        link_share= soup.find_all('form', {"method":"post"})[0]["action"]
        fb_dtsg = soup.find_all('input', {"name":"fb_dtsg"})[0]["value"]
        jazoest = soup.find_all('input', {"name":"jazoest"})[0]["value"]
        try:
            at = soup.find_all('input', {"name":"at"})[0]["value"]
        except:
            at = ""
        target = soup.find_all('input', {"name":"target"})[0]["value"]
        csid = soup.find_all('input', {"name":"csid"})[0]["value"]
        c_src = soup.find_all('input', {"name":"c_src"})[0]["value"]
        referrer = soup.find_all('input', {"name":"referrer"})[0]["value"]
        ctype = soup.find_all('input', {"name":"ctype"})[0]["value"]
        cver = soup.find_all('input', {"name":"cver"})[0]["value"]
        try:
            users_with = soup.find_all('input', {"name":"users_with"})[0]["value"]
        except:
            users_with = ""
        try:
            album_id = soup.find_all('input', {"name":"album_id"})[0]["value"]
        except:
            album_id = ""
        waterfall_source = soup.find_all('input', {"name":"waterfall_source"})[0]["value"]
        privacyx = soup.find_all('input', {"name":"privacyx"})[0]["value"]
        app_id = soup.find_all('input', {"name":"appid"})[0]["value"]
        sid = soup.find_all('input', {"name":"sid"})[0]["value"]
        try:
            linkUrl = soup.find_all('input', {"name":"linkUrl"})[0]["value"]
        except:
            linkUrl = ""
        m = soup.find_all('input', {"name":"m"})[0]["value"]
        try:
            xc_message = soup.find_all("input",{"name":"xc_message"})
        except:
            xc_message = ""
        view_post = soup.find_all('input', {"name":"view_post"})[0]["value"]
        shared_from_post_id = soup.find_all('input', {"name":"shared_from_post_id"})[0]["value"]
        data = {"fb_dtsg": fb_dtsg,
                    "jazoest": jazoest,
                    "at":at,
                    "target":target,
                    "csid":csid,
                    "c_src":c_src,
                    "referrer":referrer,
                    "ctype":ctype,
                    "cver":cver,
                    "users_with":users_with,
                    "album_id":album_id,
                    "waterfall_source":waterfall_source,
                    "privacyx":privacyx,
                    "appid":"0",
                    "sid":sid,
                    "linkUrl":linkUrl,
                    "m":m,
                    "xc_message":xc_message,
                    "view_post":view_post,
                    "shared_from_post_id":shared_from_post_id,
        }
         
        share_ = fb.PostFb(url=host+link_share, data=data)
        if share_.status_code == 302:
            print(vang+f"={blue}> {xanh}Share thành công                ")
            return 5
        else:
            print(vang+f"={blue}> {do} Lỗi share post")
            return 0
    def share(self):
        self.link = fb.get_url(self.url)
        if self.link == 3: return 3
        elif self.link == -3: return -3
        elif self.link == 21: return 21
        get_share_ = fb.GetFb(self.link)
        tree = BeautifulSoup(get_share_.text, "html.parser")
        a = tree.find_all("a", href = True)
        for i in a:
            text = i.text
            if "Đăng nhập" == text or "Log in" == text : return 21
            button = i["href"]
            if  "/composer/mbasic/?c_src=share" in button :
                return self.get_share(button)
        print(vang+f"={blue}> {do}Không có nút share")
        return 0

class AddFriend(autoFB):
    fb = autoFB()
    def __init__(self, url):
        self.url = url
    def addfriend(self):
        link = fb.get_url(self.url)
        if link == 3: return 3
        elif link == -3: return -3
        elif link == 21: return 21
        get_addfriend = fb.GetFb(link, allow_redirects=False)
        #print(get_addfriend.text)
         
        if "spam," in get_addfriend.text:
            print(do+"Acc đã bị dính spam")
            return 21
        if "/login/device-based/regular/login" in get_addfriend.text or "login.php" in get_addfriend.text or "/login/?next" in get_addfriend.text:
            print(do+"==> Cookie Die")
            print(blue+'==============================================================')
            return 21
        tree = BeautifulSoup(get_addfriend.text,"html.parser")
        a = tree.find_all("a", href = True)
        for i in a:
            button = i["href"]
            if "a/friendrequest/cancel/?" in button or "a/subscriptions/remove?" in button :
                print(vang+f"{do}[{vang}✓{do}{xanh} Follow thành công")
                return 5
            if "login.php" in button: return 21
            #"profile_add_friend.php" in button or 
            if "/a/subscribe.php" in button:
                add = fb.GetFb(host+button)
                if "https://mbasic.facebook.com/a/mobile/friends/profile_add_friend.php?subjectid" in add.text:
                    tree = BeautifulSoup(add.text, "html.parser")
                    form = tree.find("form", {"method":"post"})
                    link = form["action"]
                    fb_dtsg = form.find("input", {"name":"fb_dtsg"})["value"]
                    jazoest = form.find("input", {"name":"jazoest"})["value"]
                    
                    data = f'fb_dtsg={fb_dtsg}&jazoest={jazoest}&_wap_notice_shown=&_orig_post_vars='
                    s = fb.PostFb(url=link, data=data)
                    if s.status_code == 302:
                        print(vang+f"={blue}>{xanh} Follow thành công")
                        return 5
                    else:
                        print(vang+f"={blue}> {do}Follow không thành công")
                        return 0

                if add.status_code == 302:
                    print(vang+f"={blue}>{xanh} Follow thành công")
                    return 5
                else:
                    print(vang+f"={blue}> {do}Follow không thành công")
                    return 0
        #print(a)
        print(vang+f"={blue}> {do}Không có nút follow")
        return 0

fb = autoFB()
#auto hana

def Get(url, headers):
    for k in range(10000):
        try:
            a = requests.get(url=url, headers=headers)
                 
            return a
        except requests.ConnectionError:
            for i in range(30, -1, -1):
                print(do+"\r Lỗi mạng... kết nối lại sau {} giây.  ".format(i),end="\r")
                sleep(1)
                print(" "*40,end="\r")
        except Exception as e:
            print(e)
            sleep(1)
            print(do+"lỗi get")
            continue
    
def Post(url, headers, data=""):
    for k in range(10000):
        try:
            a = requests.post(url=url, headers=headers, data=data)
                 
            return a
        except requests.ConnectionError:
            for i in range(30, -1, -1):
                print(do+"\r Lỗi mạng... kết nối lại sau {} giây.  ".format(i),end="\r")
                sleep(1)
                print(" "*40,end="\r")
        except Exception as e:
            print(e)
            sleep(1)
            print(do+"lỗi post")
            continue


def get_cookie(id, list_cookie):
    for i in list_cookie:
        if i["id"] == id:
            g_cookie = i["cookie_fb"]
            return g_cookie
def delete_cookie(id):
    file = open("cookie.json","r")
    edit = json.load(file)
    file.close()
    for i in edit["cookie"]:
        if i["id"] == id:
            edit["cookie"].remove(i)
            edit_file = open("cookie.json","w")
            json.dump(edit,edit_file,indent=4)
            edit_file.close()
            
def create_cookie(user_id, name, cookie):
    file = open("cookie.json","r")
    edit = json.load(file)
    file.close()
    data = {"id": user_id, "name":name, "cookie_fb": cookie}
    edit["cookie"].append(data)
    edit_file = open("cookie.json","w")
    json.dump(edit,edit_file,indent=4)
    edit_file.close()

list_id_chua_co = []
def find_cookie(list_id):
    file = open("cookie.json","r")
    edit = json.load(file)
    so_cookie = 0
    list_id_file = ""
    file.close()
    if len(edit["cookie"]) <= 0:
        for id_k in list_id:
            list_id_chua_co.append(id_k)
        return len(list_id)
    for h in edit["cookie"]:
        list_id_file = list_id_file + "{}|".format(h["id"])
    for k in list_id:
        for i in edit["cookie"]:
            if str(k["id"]) in list_id_file or i["id"] == k["id"]:
                break
            else:
                list_id_chua_co.append(k)
                so_cookie += 1
                break
    return so_cookie

def nghi():
    for i in range(timer , -1, -1):
        print(vang+f" Tiếp tục sau {do}{i}{vang} giây    ", end="\r")
        sleep(1)
        #print("  "*30, end="\r")
        continue

def gach():
    print(blue+"-"*50+trang)
def print_ky_tu():
    print(blue + "="*62+ trang)

def check_success(data):
    if data["success"] == False:
        msg = data["message"]
        if "Bạn đã làm hơi nhiều job" in msg:
            print(xanh+"Nick đã làm max job ngày hôm nay.")
            return 30
        if "Hiện tại hệ thống không thể lấy thông tin bạn làm job" in msg:
        	print(mau+"Hana =>[{}{}{}]".format(do,msg,mau))
        	return 88
        if "Hệ thống kiểm tra thấy bạn chưa thực hiện thao" in msg:
            print(mau+"Hana =>[{}{}{}]".format(do,msg,mau))
            return -50
        if "Bạn cần bật chế độ công khai" in msg:
            print(mau+"Hana =>[{}{}{}]".format(do,msg,mau))
            return -11
        if "Hệ thống không tìm thấy dữ liệu job!" in msg:
            print(mau+"Hana =>[{}{}{}]".format(do,msg,mau))
            return -33
        if "Job đã có lỗi! Xin vui lòng thử lại sau" in msg:
            print(mau+"Hana =>[{}{}{}]".format(do,msg,mau))
            return 21
        print(mau+"Hana =>[{}{}{}]".format(do,msg,mau))
        return -2
def get_time_gmt():
    tz_py = pytz.timezone("GMT")
    today = datetime.datetime.now(tz_py)
    time = today.strftime("%a, %d %b %Y %H:%M:%S GMT")
    return time

def login():
    
    url_login = "https://admin.amaiteam.com/farmer/api/v1/login"
    login = Post(url=url_login,data=data_login,headers=head_login).json()
    success = check_success(login)
    if success == -2:
        print(do+"Tài khoản hoặc mật khẩu không chính xác.")
        exit(0)
    print(blue+"==============================================================")
    print(f"                     {xanh}"+login["message"])
    print(blue+"==============================================================")
    token_hana = login["data"]["token"]
    #user_id = login["data"]["user"]["id"]
    #coin = login["data"]["user"]["farmer"]["coin"]
    #luu_tai_khoan(taikhoan=account, matkhau=password)
    return token_hana
list_account = []
def get_account(token_hana):
    url = "https://admin.amaiteam.com/farmer/api/v1/me?current_version=1.0.11"
    head = {
    "accept":"application/json",
    "authorization":"Bearer "+token_hana,
    "Host":"admin.amaiteam.com",
    "Connection":"Keep-Alive",
    "Accept-Encoding":"gzip",
    "User-Agent":"okhttp/3.12.1",
    "If-Modified-Since":get_time_gmt()
    }
    account = Get(url=url,headers=head).json()
    success = check_success(account)
    if success == -2: return -2
    for i in account["data"]["data"]["farmer"]["accounts"]:
        id = i["id"]
        
        # To van duy
        if id== 11493: continue
        # Duy Khôi Võ
        #if id == 12177: continue
        # Vũ Tấn Lộc
        if id == 12186: continue
        # Võ Ngọc Uyên
        if id == 12188: continue
        # Đặng Vĩnh Khánh
        #if id == 12192: continue
        # Ngô Tuyết Tâm
        if id == 12193: continue
        # Đỗ Thu Thuận
        if id == 13211: continue
        # Võ Trọng Khôi
        if id == 13213: continue
        data_acc = {"id": i["id"], "name": i["name"]}
        #list_id.append(id)
        list_account.append(data_acc)

def report(token_hana, account_id, job_id):
    url = f"https://admin.amaiteam.com/farmer/api/v1/facebook-jobs/report?fb_account_id={account_id}&job_id={job_id}"
    head_rp = {
    "accept":"application/json",
    "authorization":"Bearer "+token_hana,
    "Host":"admin.amaiteam.com",
    "Connection":"Keep-Alive",
    "Accept-Encoding":"gzip",
    "User-Agent":"okhttp/3.12.1",
    }
    a = Post(url=url, headers=head_rp)
    if a.json()["success"] == True:
        print(f"{do}[{vang}✓{do}] {xanh}Đã báo job lỗi cho admin !")
        print(blue+'==============================================================')

    elif a.json()["success"] == False:
        print(do+"Không thể báo Job lỗi cho admin!")

def get_job(token_hana, user_id):
    head_get_job = {
    "accept":"application/json",
    "authorization":"Bearer "+token_hana,
    "Host":"admin.amaiteam.com",
    "Connection":"Keep-Alive",
    "Accept-Encoding":"gzip",
    "User-Agent":"okhttp/3.12.1",
    "If-Modified-Since":get_time_gmt()
    }
    url_get_job = f"https://admin.amaiteam.com/farmer/api/v1/facebook-jobs/list-jobs-jimmytr-tudm-hoihh-tungdt-150692-070717-150796?seeding_type=2%2C4%2C5&fb_account_id={user_id}&per_page=10&page=1"
    job = Get(url=url_get_job,headers=head_get_job)
    if job.status_code == 500:
        return -9
    success = check_success(job.json())
    if success == -2: return -2
    if len(job.json()["data"]) > 0:
        return job.json()["data"]
    else:
        return -1
def check_start_work(token_hana, account_id, job_id):
    url = f"https://admin.amaiteam.com/farmer/api/v1/facebook-jobs/start-work?account_id={account_id}&job_id={job_id}"
    head_check_start = {
    "accept":"application/json",
    "authorization":"Bearer "+token_hana,
    "Host":"admin.amaiteam.com",
    "Connection":"Keep-Alive",
    "Accept-Encoding":"gzip",
    "User-Agent":"okhttp/3.12.1"
    }
    start = Post(url=url, headers=head_check_start).json()
    if start["success"] == True:
        return 40
    else:
        return -40
def get_info_job(token_hana, account_id, job_id):
    head_info_job = {
    "accept":"application/json",
    "authorization":"Bearer "+token_hana,
    "Host":"admin.amaiteam.com",
    "Connection":"Keep-Alive",
    "Accept-Encoding":"gzip",
    "User-Agent":"okhttp/3.12.1",
    "If-Modified-Since":get_time_gmt()
    }
    url=f"https://admin.amaiteam.com/farmer/api/v1/facebook-jobs/detail?account_id={account_id}&job_id={job_id}"
    info_job = Get(url=url, headers=head_info_job).json()
    success = check_success(info_job)
    if success == -2: return -2
    if len(info_job["data"]) > 0:
        return info_job["data"]
    else:
        return -1
    
def check_job(token_hana, id_job, user_id,follow_info="", like_info="", fanpage_info=""):
    head_check_job = {
    "accept":"application/json",
    "authorization":"Bearer "+token_hana,
    "Host":"admin.amaiteam.com",
    "Connection":"Keep-Alive",
    "Accept-Encoding":"gzip",
    "User-Agent":"okhttp/3.12.1"
    }
    
    url_check_job = f"https://admin.amaiteam.com/farmer/api/v1/facebook-jobs/execute?fb_account_id={user_id}&job_id={id_job}&user_following_info={follow_info}&user_likes_info={like_info}&fanpage_likes_info={fanpage_info}"
    check_job = Post(url=url_check_job,headers=head_check_job).json()
    success = check_success(check_job)
    if success == -33:
    	report(token_hana=token_hana, account_id=id, job_id=j["id"])
    	return -5
    if success == -11:
    	report(token_hana=token_hana, account_id=id, job_id=j["id"])
    	return -5
    if success == 88:
    	report(token_hana=token_hana, account_id=id, job_id=j["id"])
    	nghi()
    	return -5
    if success == -50:
        report(token_hana=token_hana, account_id=user_id, job_id=id_job)
        return -5
    if success == 21:
        report(token_hana=token_hana, account_id=user_id, job_id=id_job)
        return -5
    if success == -2: return -1
    if success == 30: return 30
    #print_ky_tu()
    tong_job = re.sub(r'\D',"",check_job["message"])
    if int(tong_job) > 499:
        print(do+"Bạn đã AUTO max job hôm nay. Vui lòng quay lại vào ngày mai")
        exit(0)
    if "Đã gửi thông tin lên hệ thống xét duyệt !" in check_job["message"]:
            done = str(''.join(x for x in check_job["message"] if x.isdigit()))
            print(f"{do}[{vang}Status{do}] {trang}=> {magenta}Bạn đã làm{trang} {done} {magenta}job ngon lành.")
            print(blue+'==============================================================')
            return 4
    print(f"{do}[{vang}Status{do}] {trang}=> {magenta}Bạn đã làm{trang} {done} {magenta}job ngon lành. ")
    print(blue+'==============================================================')
def lay_text_comment(account_id, job_id):
    url_lay_cmt = f"https://admin.amaiteam.com/farmer/api/v1/facebook-jobs/detail?account_id={account_id}&job_id={job_id}"
    head_lay_cmt = {
    "accept":"application/json",
    "authorization":"Bearer "+token_hana,
    "Host":"admin.amaiteam.com",
    "Connection":"Keep-Alive",
    "Accept-Encoding":"gzip",
    "User-Agent":"okhttp/3.12.1"
    }
    
    check_lay_cmt = Get(url=url_lay_cmt,headers=head_lay_cmt).json()
    success = check_success(check_lay_cmt)
    """if success == -3:
        report(token_hana=token_hana, account_id=user_id, job_id=id_job)
        return -5"""
    if success == -2: return -1
    if success == 30: return 30
    return check_lay_cmt["data"]["comment_need"]

def lam_viec(data_job, user_id):
    id_job = data_job["id"]
    info_job = get_info_job(token_hana,account_id=user_id, job_id=id_job)
    if info_job == -1: return -1
    sleep(1.5)
    start = check_start_work(token_hana, account_id=user_id, job_id=id_job)
    if start == -40: return -40
    seeding_type = info_job["seeding_type"]
      #coin_job = i["coin"]''
    id_post = info_job["post_id"]
    money = info_job["coin"]
    seeding_title = data_job["seeding_title"]
    basic_post_link = f"https://mbasic.facebook.com/{id_post}"
     
    if "100786261302696" in basic_post_link or "100049866039010" in basic_post_link:
        return 3
    print(xanh+f"{do}[{vang}L{do}] {xanh}Link {do}[{vang}{basic_post_link}{do}]")
    print(xanh+f"{do}[{vang}J{do}]{xanh} Job id:{vang}", id_job)
    print(xanh+f"{do}[{vang}${do}] {xanh}Tiền nhận được:{vang}", money,f"{do}Vnđ")
    print(f"{do}[{vang}∆{do}] {blue}" + seeding_title)
    if seeding_type == 3333:
        text_cmt = lay_text_comment(user_id,id_job)
        a = ast.literal_eval(text_cmt)
        text_comment = random.choice(a)
        print(text_comment)
        k = Comment(basic_post_link, text_comment).comment()
        if k == 21: return 21
        elif k == 3: return 3
        elif k == -3: return -3
        elif k == 0: return 0
        elif k == 22: return 22
        elif k == 2: return 2
    elif seeding_type == 100:
        k = Share(basic_post_link).share()
        if k == 21: return 21
        elif k == 3: return 3
        elif k == -3: return -3
        elif k == 0: return 0
        elif k == 22: return 22
        elif k == 2: return 2
    elif seeding_type == 2 or seeding_type == 9 or seeding_type == 10 or seeding_type == 11:
        if "haha" in seeding_title.lower() :
            k = Like(basic_post_link).haha()
        if "buồn" in seeding_title.lower():
            k = Like(basic_post_link).sad()
        if "phẫn nộ" in seeding_title.lower():
            k = Like(basic_post_link).angry()
        if "yêu thích" in seeding_title.lower() or "love" in seeding_title.lower():
            k = Like(basic_post_link).love()
        else:
            k = Like(basic_post_link).like()
        if k == 21: return 21
        elif k == 3: return 3
        elif k == -3: return -3
        elif k == 0: return 0
        elif k == 22: return 22
        elif k == 2: return 2
        ch = check_job(token_hana=token_hana,user_id=user_id, id_job=id_job)
        return ch
    elif seeding_type == 12:
        k = Like(basic_post_link).love()
        if k == 21: return 21
        elif k == 3: return 3
        elif k == -3: return -3
        elif k == 0: return 0
        elif k == 22: return 22
        elif k == 2: return 2
        ch = check_job(token_hana=token_hana,user_id=user_id, id_job=id_job)
        return ch
    elif seeding_type == 4:
        k = Like(basic_post_link).likepage()
        if k == 21: return 21
        elif k == 3: return 3
        elif k == -3: return -3
        elif k == 0: return 0
        elif k == 22: return 22
        elif k == 2: return 2
        ch = check_job(token_hana=token_hana, id_job=id_job, user_id=user_id)
        return ch
    elif seeding_type == 5:
        k = AddFriend(basic_post_link).addfriend()
        if k == 21: return 21
        elif k == 3: return 3
        elif k == -3: return -3
        elif k == 0: return 0
        elif k == 22: return 22
        elif k == 2: return 2
        sleep(3)
        ch = check_job(token_hana=token_hana, id_job=id_job, user_id=user_id)
        
        return ch
    else:
         print(vang+"Tool chưa hỗ trợ công việc này! mã lỗi [{}]".format(seeding_type))
         return -90
    sleep(2)
    print(blue+'==============================================================')
token_hana = login()
get_account(token_hana)
find = find_cookie(list_id=list_account)
if find > 0:
    print(vang+"Bạn có {}{}{} account chưa thêm cookie\nbạn có muốn thêm không.\nNhập {}Co{} hoặc {}Khong".format(do,find,vang,do,vang,do)+trang)
    nhap = input(xanh+f"Nhập: {do}")
    if nhap.lower() == "co":
        for i in list_id_chua_co:
            cook = input(vang+"Nhập cookie nick [{}{}{}]\n:".format(xanh,i["name"],vang))
            create_cookie(user_id=i["id"], name=i["name"], cookie=cook)
    if nhap.lower() == "khong":
        for i in list_id_chua_co:
            list_account.remove(i)
xoa = 0
if os.path.exists("maxjob.txt") == False:
    fie = open("maxjob.txt","a")
    fie.close
if os.path.exists("today.txt") == False:
    fie = open("today.txt","a")
    fie.close
def check_today():
    today = datetime.datetime.now().strftime("%m%d")
    file = open("today.txt","r").readline()
    if today != file:
        f = open("today.txt","w")
        f.write(today)
        f.close()
        fmax = open("maxjob.txt","w")
        fmax.write("")
        fmax.close()
def acc_max_job(id):
    file = open("maxjob.txt","r")
    read = file.read()
    file.close()
    read = read +"|"+ str(id)
    f = open("maxjob.txt","w")
    f.write(read)
    f.close()
def get_acc():
    file = open("cookie.json","r")
    edit = json.load(file)
    file.close()
    #print("get_cookie")
    return edit["cookie"]
list_acc = get_acc()
list_acc_die_cookie = []
list_job_k_lam = []
if os.path.exists("block.dtt") == False:
         f = open("block.dtt","a")
         f.close()
file = open("block.dtt","r").readline()
maxjob = open("maxjob.txt","r").readline()
while True:
    check_today()
    for i in list_acc:
        id = i["id"]
        if str(id) in file: continue
        if str(id) in maxjob: continue
        print(f' {vang}Tìm job nick {do}[{cyan}{i["name"]}{do}]                  ',end="\r")
        data_job = get_job(token_hana, id)
        if data_job == -9: continue
        if data_job == -2: continue
        if data_job ==  -1:
            #print(do+"Không có job, next acc")
            for i in range(10, -1, -1):
                sleep(1)
            continue
        data_Tool["cookie"] = get_cookie(id, list_acc).strip()
        if data_Tool["cookie"] == "" or data_Tool["cookie"] == " ":
            list_acc_die_cookie.append(id)
            continue
        
        print(xanh+f'{do}[{vang}FaceBook{do}]{trang} ==> {do}[{cyan}{i["name"]}{do}]       ')
        for j in data_job:
            if j["id"] in list_job_k_lam: continue
            lam = lam_viec(data_job=j , user_id=id)
            if lam == -3:
                report(token_hana=token_hana, account_id=id, job_id=j["id"])
                nghi()
                continue
                #list_acc_die_cookie.append(id)
                break
            elif lam == 0:
            	report(token_hana=token_hana, account_id=id, job_id=j["id"])
            	nghi()
            	continue
            elif lam == -90:
                list_job_k_lam.append(j["id"])
                continue
            elif lam == 3:
                report(token_hana=token_hana, account_id=id, job_id=j["id"])
                nghi()
                continue
            elif lam == 21:
                list_acc.remove(i)
                break
            elif lam == 30:
                acc_max_job(id)
                list_acc.remove(i)
                break
                continue
            elif lam == 2:
                list_acc.remove(i)
                break
            elif lam == -1: continue
            elif lam == -1:
                report(token_hana=token_hana, account_id=id, job_id=j["id"])
                nghi()
                continue
            nghi()
